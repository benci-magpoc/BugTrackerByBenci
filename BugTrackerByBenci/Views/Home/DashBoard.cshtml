@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Identity
@using BugTrackerByBenci.Models.Enums
@using BugTrackerByBenci.Services.Interfaces
@model BugTrackerByBenci.Models.ViewModels.DashboardViewModel
@inject UserManager<BTUser> UserManager
@inject IRolesService RoleService

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? btUser = await UserManager.GetUserAsync(User);
}

<a href="javascript:void(0);">
    @* User Info *@

</a>
@* Get The btUser FullName *@
<strong>@btUser.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
    @* Company Name *@
    <strong>@Model.Company!.Name</strong>
</span>

<!-- Info Pills -->
<div class="container-fluid">
    <div class="row row-cols-1 mt-2">
        <div class="col-12 col-lg-3 col-md-6">
            <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
                <div class="card text-center bg-info" style="border-radius: .5rem;">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>@Model.Projects!.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now)!.Count()</h3>
                            <span>Active Projects</span>
                        </div>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-12 col-lg-3 col-md-6">
            <a asp-action="Index" asp-controller="Tickets" style="text-decoration:none">
                <div class="card text-center bg-secondary" style="border-radius: .5rem;">
                    <div class="body">
                        <div class="p-15 text-light">

                            <h3>@Model.Tickets!.Count()</h3>
                            <span>Total Tickets</span>
                        </div>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-12 col-lg-3 col-md-6">
            <a asp-action="UnassignedTickets" asp-controller="Tickets" style="text-decoration:none">
                <div class="card text-center bg-warning" style="border-radius: .5rem;">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>@Model.Tickets!.Where(t => string.IsNullOrEmpty(t.DeveloperUserId))!.Count()</h3>
                            <span>Unassigned Tickets</span>
                        </div>
                    </div>
                </div>
            </a>
        </div>
        <div class="col-12 col-lg-3 col-md-6">
            <div class="card text-center bg-dark" style="border-radius: .5rem;">
                <div class="body">
                    <div class="p-15 text-light">
                        <h3>
                            @(
                            Model.Projects!.Count()
                            + Model.Tickets!.Count()
                            + Model.Members!.Count()
                            )
                        </h3>
                        <span>Total Data</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row row-cols-1 gy-2">
        <div class="col-md-12 col">
            <div class="row mt-2">
                <div class="col-12 col-md-6 col-lg-3 mt-1">
                    <div class="card m-1 p-2 h-100" style="border-radius: .5rem;">
                        <div class="card-body">
                            <h5>Projects by Tickets</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisActiveWork"></div>
                            </div>
                            <div class="col-md-12 text-center">
                                <div id="activeWorkLegend" class="donut-legend" style="font-size: x-small"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mt-1">
                    <div class="card m-1 p-2 h-100" style="border-radius: .5rem;">
                        <div class="card-body">
                            <h5>Tickets by Priority</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketPriority"></div>
                            </div>
                        </div>
                        <div class="col-md-12 text-center">
                            <div id="legend" class="donut-legend" style="font-size: x-small"></div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mt-1">
                    <div class="card m-1 p-2 h-100" style="border-radius: .5rem;">
                        <div class="card-body">
                            <h5>Tickets by Type</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketType"></div>
                            </div>
                            <div class="col-md-12 text-center">
                                <div id="typeLegend" class="donut-legend" style="font-size: x-small"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-lg-3 mt-1">
                    <div class="card m-1 p-2 h-100" style="border-radius: .5rem;">
                        <div class="card-body">
                            <h5>Tickets by Status</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketStatus"></div>
                            </div>
                        </div>
                        <div class="col-md-12 text-center">
                            <div id="statusLegend" class="donut-legend" style="font-size: x-small"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 mt-3 mt-md-3 m-md-0">
            <div class="card m-1 p-2" style="border-radius: .5rem;">
                <div class="card-body" style="height:600px;overflow-y:auto;">
                    <h5>Project: Tickets vs Developers</h5>
                    <!-- HTML -->
                    <div id="plotlyChart"></div>
                </div>
            </div>
        </div>
    </div>
    <!-- TODO Tooltip to go to project -->
    <div class="row mt-2 mt-md-3">
        @* Projects Table *@
        <div class="col-12 col-md-3 mt-1">

            <div class="card m-1 me-md-0 p-1" style="border-radius: .5rem;">
                <div class="card-header">
                    <h2>Projects </h2>
                </div>
                <div class="card-body">
                    <h5>(Click a project to show tickets)</h5>
                    <ol id="projects" style="list-style: none; padding: 0 !important;">
                        @foreach (var project in Model.Projects!)
                        {

                            <li>
                                <div class="project-name">
                                    <a data-target-id="@project.Id" data-target-name="@project.Name" type="button"
                                   class="my-1 projectItem link-info">@project.Name</a>

                                    <div class="project-description-bottom">
                                        <p>@project.Description</p>
                                        <br />
                                        <a type="button" asp-controller="Projects" asp-action="Details" asp-route-id="@project.Id" class="btn btn-sm btn-primary mb-2">Go to Project's Details</a>
                                    </div>
                                </div>
                            </li>
                        }
                    </ol>
                </div>
                <div class="card-footer">
                </div>
            </div>

        </div>

        @* Tickets Table *@
        <div class="col-12 col-md-6 mt-1">
            <div class="card m-1 mx-md-0 p-1" style="height: 800px; overflow: scroll; border-radius: .5rem;">
                <div class="card-header">
                    <h2>Tickets of <span id="projectName">All Projects</span></h2>
                </div>
                <div class="card-body">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Title</th>
                                <th>Developer</th>
                                <th>Status</th>
                                <th>Priority</th>
                            </tr>
                        </thead>
                        <tbody id="ticketsList">
                            @foreach (var ticket in Model.Tickets!)
                            {
                                <tr data-target="@ticket.ProjectId">
                                    <td>
                                        <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id"
                                       data-bs-toggle="tooltip" title="Click to go to details">@ticket.Title</a>
                                    </td>
                                    <td>
                                        @if (ticket.DeveloperUser != null)
                                        {
                                            @ticket.DeveloperUser!.FullName
                                        }
                                        else
                                        {
                                            if (User.IsInRole(nameof(BTRoles.Admin)) || User.IsInRole(nameof(BTRoles.Admin)))
                                            {
                                                <a class="btn btn-xs btn-info ms-2" asp-action="AssignDeveloper" asp-controller="Tickets" asp-route-id="@ticket.Id">Assign Dev</a>
                                            }
                                            else
                                            {
                                                <text>No Developer Assigned</text>
                                            }
                                        }
                                    </td>
                                    <td>
                                        <span data-status="@ticket.TicketStatus!.Name">@ticket.TicketStatus!.Name</span>
                                    </td>
                                    <td>
                                        <span data-priority="@ticket.TicketPriority!.Name">@ticket.TicketPriority!.Name</span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="card-footer">
                </div>
            </div>
        </div>
        <div class="col-12 col-md-3 mt-1">
            <div class="card ms-md-0 m-1 p-1" style="border-radius: .5rem;">
                <div class="card-header">
                    <h2>Company Members</h2>
                </div>
                <div class="card-body">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Avatar</th>
                                <th>Name</th>
                                <th>Role</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in Model.Members!)
                            {
                                <tr>
                                    <td>
                                        @if (member.AvatarData != null)
                                        {
                                            <span><img src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarData))" alt="user" class="rounded-circle" width="30" /></span>
                                        }
                                        else
                                        {
                                            <span><img src="https://cdn.icon-icons.com/icons2/233/PNG/512/Contacts_26253.png" alt="user" class="rounded-circle" width="30" /></span>
                                        }
                                    </td>
                                    <td>
                                        <span>@member.FullName</span>
                                    </td>
                                    <td>
                                        <span>@await RoleService.GetUserRoleAsync(member) </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>

    <script>
        var morrisDonutData = [
            {
                label: "Low",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Low)).Count()
                                                                                                                                                                                                    }, {
                label: "Medium",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Medium)).Count()
                                                                                                                                                                                                    }, {
                label: "High",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.High)).Count()
                                                                                                                                                                                                    }, {
                label: "Urgent",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Urgent)).Count()
                                                                                                                                                                                                    }
        ];
        /*
        Chart for Ticket by Priority
        */
        if ($('#morrisTicketPriority').get(0)) {
            var donutChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChart.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#legend').append(legendItem);
            });
        };

        //Ticket Status
        var morrisDataTicketStatus = [
            {
                label: "New",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count()
                                                                                                                                                                                                    }, {
                label: "Dev",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count()
                                                                                                                                                                                                    }, {
                label: "Test",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count()
                                                                                                                                                                                                    }, {
                label: "Resolved",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count()
                                                                                                                                                                                                    }
        ];


        /*
        Chart for Ticket By Status
        */
        if ($('#morrisTicketStatus').get(0)) {
            var donutChartStatus = Morris.Donut({
                resize: true,
                element: 'morrisTicketStatus',
                data: morrisDataTicketStatus,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChartStatus.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#statusLegend').append(legendItem);
            });
        };

        var morrisDataTicketType = [
            {
                label: "New Development",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.NewDevelopment)).Count()
                                                                                                                                                                                                    }, {
                label: "Routine",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.WorkTask)).Count()
                                                                                                                                                                                                    }, {
                label: "Defect",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.Defect)).Count()
                                                                                                                                                                                                    }, {
                label: "Change",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.ChangeRequest)).Count()
                                                                                                                                                                                                    }, {
                label: "Enchancement",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.Enhancement)).Count()
                                                                                                                                                                                                    }, {
                label: "General",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.GeneralTask)).Count()
                                                                                                                                                                                                    }
        ];
        /*
        Chart for Ticket by Type
        */
        if ($('#morrisTicketType').get(0)) {
            var donutChartType = Morris.Donut({
                resize: true,
                element: 'morrisTicketType',
                data: morrisDataTicketType,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b', '#ffc36d', '#7460ee']
            });

            donutChartType.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChartType.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#typeLegend').append(legendItem);
            });
        };

        var morrisDataActiveWork = [
            {
                label: "Active Projects",
                value: @Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()
                                                                                                                                                                                                    }, {
                label: "Assigned Tickets",
                value: @Model.Tickets.Where(t => t.DeveloperUser != null).Count()
                                                                                                                                                                                                    }, {
                label: "Unassigned Tickets",
                value: @Model.Tickets.Where(t => t.DeveloperUser == null).Count()
                                                                                                                                                                                                    }, {
                label: "Members",
                value: @Model.Company.Members.Count()
                                                                                                                                                                                                    }
        ];
        /*
        Chart for Ticket by Type
        */
        if ($('#morrisActiveWork').get(0)) {
            var donutChartActiveWork = Morris.Donut({
                resize: true,
                element: 'morrisActiveWork',
                data: morrisDataActiveWork,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChartActiveWork.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChartActiveWork.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#activeWorkLegend').append(legendItem);
            });
        };

    </script>

    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>

        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function(result) {
                alert(result.d);
            },
            error: function(result) {
                alert(result.d);
            }
        });

    </script>

    <script>

        var allRows = document.querySelectorAll("#ticketsList > tr");

        console.log(allRows);
        document.querySelectorAll("a.projectItem").forEach((btn) => {

            btn.addEventListener("click",
                function() {
                    console.log(allRows);

                    var ticketBody = document.getElementById("ticketsList");
                    allRows.forEach((row) => {
                        ticketBody.appendChild(row);
                    });

                    var projectName = this.getAttribute("data-target-name");
                    var targetId = this.getAttribute("data-target-id");
                    var ticketId = document.querySelectorAll(`tr[data-target="${targetId}"]`);
                    ticketBody = document.getElementById("ticketsList");

                    document.getElementById("projectName").innerHTML = projectName;
                    while (ticketBody.hasChildNodes()) {
                        ticketBody.removeChild(ticketBody.firstChild);
                    }

                    ticketId.forEach((row) => {
                        ticketBody.appendChild(row);

                    });
                });
        });

    </script>
}