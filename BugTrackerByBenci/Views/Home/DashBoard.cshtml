@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Identity
@using BugTrackerByBenci.Models.Enums
@using BugTrackerByBenci.Services.Interfaces
@model BugTrackerByBenci.Models.ViewModels.DashboardViewModel
@inject UserManager<BTUser> UserManager
@inject IRolesService RoleService

@{
    ViewData["Title"] = "Dashboard";
    @* Instantiate the btUser *@
    BTUser? btUser = await UserManager.GetUserAsync(User);
    int? ticketId = null;
}

<a href="javascript:void(0);">
    @* User Info *@
    @btUser.AvatarData
</a>
@* Get The btUser FullName *@
<strong>@btUser.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
    @* Company Name *@
    <strong>@Model.Company!.Name</strong>
</span>


<div>
    <div class="container-fluid">

        <!-- Info Pills -->
        <div class="row mt-2">
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center bg-info">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Projects!.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now)!.Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <a asp-action="Index" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center bg-secondary">
                        <div class="body">
                            <div class="p-15 text-light">

                                <h3>@Model.Tickets!.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-warning">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>@Model.Tickets!.Where(t => string.IsNullOrEmpty(t.DeveloperUserId))!.Count()</h3>
                            <span>Unassigned Tickets</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6">
                <div class="card text-center bg-dark">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>
                                @(
                                Model.Projects!.Count()
                                + Model.Tickets!.Count()
                                + Model.Members!.Count()
                                )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="col-md-12 col">
                <div class="row col-cols-4 mt-5 bg-secondary">
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Projects by Tickets</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisActiveWork"></div>
                            </div>
                        </div><div class="col-md-12 text-center">
                            <div id="activeWorkLegend" class="donut-legend" style="font-size:x-small"></div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Priority</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketPriority"></div>
                            </div>
                        </div><div class="col-md-12 text-center">
                            <div id="legend" class="donut-legend" style="font-size:x-small"></div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Type</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketType"></div>
                            </div>
                            <div class="col-md-12 text-center">
                                <div id="typeLegend" class="donut-legend" style="font-size:x-small"></div>
                            </div>
                        </div>
                    </div>
                    <div class="card col m-1 p-2">
                        <div class="card-body">
                            <h5>Tickets by Status</h5>
                            <!-- Morris: Donut -->
                            <div class="col-md-12">
                                <div class="chart chart-md" id="morrisTicketStatus"></div>
                            </div>
                        </div><div class="col-md-12 text-center">
                            <div id="statusLegend" class="donut-legend" style="font-size:x-small"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row gy-2">
            <div class="cols mt-5 bg-secondary">
                <div class="card col m-1 p-2">
                    <div class="card-body" style="height:600px;overflow-y:auto;">
                        <h5>Project: Tickets vs Developers</h5>
                        <!-- HTML -->
                        <div id="plotlyChart"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr />
    <div class="mt-5 ">
        <div class="row">
            @* Projects Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Projects</h2>
                        </div>
                        <div class="card-body">
                            <ol id="projects">
                                @foreach (var project in Model.Projects!)
                                {
                                    <li><a data-target-id="@project.Id" data-target-name="@project.Name" type="button" class="projectItem">@project.Name</a></li>
                                }
                            </ol>
                        </div>
                        <div class="card-footer">
                        </div>
                    </div>
                </div>
            </div>
            @* Tickets Table *@
            <div class="col">
                <div class="bg-secondary">
                    <div class="card m-1 p-2">
                        <div class="card-header">
                            <h2>Tickets of <span id="projectName">All Projects</span></h2>
                            <table class="table table-hover">
                                <thead class="">
                                <tr>
                                    <th>Title</th>
                                    <th>Developer</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                </tr>
                                </thead>
                                <tbody id="ticketsList">
                                    @foreach(var ticket in Model.Tickets!){
                                        <tr data-target="@ticket.ProjectId">
                                            <td><a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id"
                                                   data-bs-toggle="tooltip" title="@ticket.Title details">@ticket.Title</a></td>
                                            <td>@ticket.DeveloperUser?.FullName</td>
                                            <td>@ticket.TicketStatus!.Name</td>
                                            <td>@ticket.TicketPriority!.Name</td>
                                        </tr>
                                        }

                                    </tbody>
                                </table>
                            </div>
                            <div class="card-body">
                            </div>
                            <div class="card-footer">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-2 ">
                    <div class="bg-dark">
                        <div class="card m-1 p-2">
                            <div class="card-header">
                                <h2>Members</h2>
                                <hr />
                            </div>
                            <div class="card-body">
                                <ul>
                                @foreach (var member in Model.Members!)
                                {
                                    <li><a href="#">@member.FullName - @await RoleService.GetUserRoleAsync(member) </a></li>
                                }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
                                        @section scripts{
    <script src="//cdnjs.cloudflare.com/ajax/libs/raphael/2.1.0/raphael-min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/morris.js/0.5.1/morris.min.js"></script>

    <script>
        var morrisDonutData = [
            {
                label: "Low",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Low)).Count()
            }, {
                label: "Medium",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Medium)).Count()
            }, {
                label: "High",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.High)).Count()
            }, {
                label: "Urgent",
                value: @Model.Tickets.Where(t => t.TicketPriority.Name == nameof(BTTicketPriorities.Urgent)).Count()
            }
        ];
        /*
        Chart for Ticket by Priority
        */
        if ($('#morrisTicketPriority').get(0)) {
            var donutChart = Morris.Donut({
                resize: true,
                element: 'morrisTicketPriority',
                data: morrisDonutData,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChart.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#legend').append(legendItem);
            });
        };

        //Ticket Status
        var morrisDataTicketStatus = [
            {
                label: "New",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count()
            }, {
                label: "Dev",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count()
            }, {
                label: "Test",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count()
            }, {
                label: "Resolved",
                value: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count()
            }
        ];


        /*
        Chart for Ticket By Status
        */
        if ($('#morrisTicketStatus').get(0)) {
            var donutChartStatus = Morris.Donut({
                resize: true,
                element: 'morrisTicketStatus',
                data: morrisDataTicketStatus,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChartStatus.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChart.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#statusLegend').append(legendItem);
            });
        };

        var morrisDataTicketType = [
            {
                label: "New Development",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.NewDevelopment)).Count()
            }, {
                label: "Routine",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.WorkTask)).Count()
            }, {
                label: "Defect",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.Defect)).Count()
            }, {
                label: "Change",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.ChangeRequest)).Count()
            }, {
                label: "Enchancement",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.Enhancement)).Count()
            }, {
                label: "General",
                value: @Model.Tickets.Where(t => t.TicketType.Name == nameof(BTTicketTypes.GeneralTask)).Count()
            }
        ];
        /*
        Chart for Ticket by Type
        */
        if ($('#morrisTicketType').get(0)) {
            var donutChartType = Morris.Donut({
                resize: true,
                element: 'morrisTicketType',
                data: morrisDataTicketType,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b', '#ffc36d', '#7460ee']
            });

            donutChartType.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChartType.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#typeLegend').append(legendItem);
            });
        };

        var morrisDataActiveWork = [
            {
                label: "Active Projects",
                value: @Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()
            }, {
                label: "Assigned Tickets",
                value: @Model.Tickets.Where(t => t.DeveloperUser != null).Count()
            }, {
                label: "Unassigned Tickets",
                value: @Model.Tickets.Where(t => t.DeveloperUser == null).Count()
            }, {
                label: "Members",
                value: @Model.Company.Members.Count()
            }
        ];
        /*
        Chart for Ticket by Type
        */
        if ($('#morrisActiveWork').get(0)) {
            var donutChartActiveWork = Morris.Donut({
                resize: true,
                element: 'morrisActiveWork',
                data: morrisDataActiveWork,
                colors: ['#0088cc', '#734ba9', '#E36159', '#ff993b']
            });

            donutChartActiveWork.options.data.forEach(function(label, i) {
                var legendItem = $('<span></span>').text(label['label'] + ": " + label['value']).prepend('<span>&nbsp;</span>');
                legendItem.find('span')
                    .css('backgroundColor', donutChartActiveWork.options.colors[i])
                    .css('width', '20px')
                    .css('display', 'inline-block')
                    .css('margin', '10px');
                $('#activeWorkLegend').append(legendItem);
            });
        };

    </script>

    <!--  Plotly Charts  -->
    <!-- Load plotly.js into the DOM -->
    <script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
    <script>

        $.ajax({
            type: "POST",
            url: "/Home/PlotlyBarChart",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(result) {
                var data = result;

                var layout = { barmode: 'group' };

                Plotly.newPlot('plotlyChart', data, layout);
            },
            failure: function(result) {
                alert(result.d);
            },
            error: function(result) {
                alert(result.d);
            }
        });

    </script>

    <script>
        
        var allRows = document.querySelectorAll("#ticketsList > tr");

        console.log(allRows);
        document.querySelectorAll("a.projectItem").forEach((btn) => {
            
            btn.addEventListener("click",
                function() {
                    var ticketBody = document.getElementById("ticketsList");
                    allRows.forEach((row) => {
                        ticketBody.appendChild(row);
                    });

                    var projectName = this.getAttribute("data-target-name");
                    var targetId = this.getAttribute("data-target-id");
                    var ticketId = document.querySelectorAll(`tr[data-target="${targetId}"]`);
                    ticketBody = document.getElementById("ticketsList");
                    console.log(allRows);

                    document.getElementById("projectName").innerHTML = projectName;
                    while (ticketBody.hasChildNodes()) {
                        ticketBody.removeChild(ticketBody.firstChild);
                    }
                    
                    ticketId.forEach((row) => {
                        ticketBody.appendChild(row);
                        
                    });
                });
        });

    </script>
}